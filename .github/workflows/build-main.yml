name: Java CI with Gradle + build docker

env:
  CONTEXT_DIR: './'
  IMAGE_NAME: ${{ github.repository }}/capgemini
  DOCKERFILE: Dockerfile
  DOCKER_REGISTRY: ghcr.io


on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Set up Node
        uses: actions/setup-node@v4.0.0
        with:
          node-version: 20

      - name: Setup Pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          cd client && pnpm install

      - name: Lint, Test and Build Angular App
        shell: bash
        run: |
          cd client && npm run ci

      - name: Execute Gradle test
        run: ./gradlew test

      - name: Execute Gradle build
        run: ./gradlew build

      - run: |
          mkdir -p build/dependency && (cd build/dependency; jar -xf ../libs/*-SNAPSHOT.jar)
      - run: |
          echo "IMAGE_NAME_WITH_REGISTRY=$DOCKER_REGISTRY/${IMAGE_NAME,,}" >> $GITHUB_ENV
          export IMAGE_NAME_WITH_REGISTRY=$DOCKER_REGISTRY/${IMAGE_NAME,,}
          echo "FULL_IMAGE_NAME=$IMAGE_NAME_WITH_REGISTRY:$GITHUB_SHA-gitsha" >> $GITHUB_ENV
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Release to DockerHub
        shell: bash
        run: ./build_and_push.sh